name: Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit flask flask-sqlalchemy flask-wtf wtforms python-dotenv markupsafe

    - name: Run Bandit security scan
      id: bandit
      run: |
        bandit -r . -f json -o bandit-results.json || true

    - name: Check Bandit results
      run: |
        # Проверяем наличие критических уязвимостей
        if python -c "
        import json
        with open('bandit-results.json', 'r') as f:
            data = json.load(f)
        critical_issues = [issue for issue in data.get('results', []) 
                          if issue.get('issue_confidence') == 'HIGH' 
                          and issue.get('issue_severity') in ['HIGH', 'MEDIUM']]
        print(f'Найдено критических уязвимостей: {len(critical_issues)}')
        for issue in critical_issues:
            print(f'- {issue[\"test_name\"]}: {issue[\"issue_text\"]}')
        exit(len(critical_issues) > 0)
        "; then
          echo "✅ Критических уязвимостей не обнаружено"
        else
          echo "❌ Обнаружены критические уязвимости безопасности!"
          echo "Пожалуйста, исправьте их перед слиянием кода."
          exit 1
        fi

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-results.json

  tests:
    runs-on: ubuntu-latest
    needs: security-scan

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask flask-sqlalchemy flask-wtf wtforms python-dotenv markupsafe psycopg2-binary pytest

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-ci-cd
      run: |
        # Создаем простой тест безопасности
        cat > test_security.py << 'EOF'
        import pytest
        import os
        import sys
        sys.path.append('.')

        from app import app as flask_app

        @pytest.fixture
        def app():
              flask_app.config['TESTING'] = True
              flask_app.config['WTF_CSRF_ENABLED'] = False  # Отключаем CSRF для тестов
        return flask_app

        @pytest.fixture
        def client(app):
              return app.test_client()

        def test_security_headers(client):
        """Тестируем наличие security headers"""
              response = client.get('/login')
    
        # Проверяем основные security headers
              assert response.status_code == 200
              assert 'X-Content-Type-Options' in response.headers
              assert response.headers['X-Content-Type-Options'] == 'nosniff'
              assert 'X-Frame-Options' in response.headers

        def test_csrf_protection(client):
        """Тестируем наличие CSRF защиты в формах"""
              response = client.get('/login')
              assert response.status_code == 200
        # Проверяем, что форма содержит CSRF токен
              assert b'csrf_token' in response.data

        def test_authentication_required(client):
        """Тестируем, что главная страница требует аутентификации"""
              response = client.get('/')
              assert response.status_code == 302  # Редирект на login

        if __name__ == '__main__':
              pytest.main([__file__, '-v'])
        EOF
        
        pytest test_security.py -v